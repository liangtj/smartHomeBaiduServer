# This file is a template, and might need editing before it works on your project.
image: golang:latest

variables:
  # Please edit to your GitLab project
  REPO_NAME: gitlab.com/smartHomeBaidu/Serverend

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME

stages:
    - test
    - build

format:
    stage: test
    script:
      - declare -a services=("directive-resolver")
        (for i in "${arr[@]}"; do \
            cd "${i}"; \
            go fmt $(go list ./... | grep -v /vendor/); \
            go vet $(go list ./... | grep -v /vendor/); \
            go test -race $(go list ./... | grep -v /vendor/); \
            cd ..; \
        done);

compile:
    stage: build
    script:
      - declare -a services=("directive-resolver")
      - (for i in "${arr[@]}"; do \
            cd "${i}"; \
            go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/mybinary; \
            cd ..; \
        done);
    artifacts:
      paths:
        - mybinary
